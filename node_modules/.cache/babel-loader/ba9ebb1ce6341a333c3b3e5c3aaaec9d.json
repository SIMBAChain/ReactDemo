{"ast":null,"code":"import _slicedToArray from \"/Users/stevenperegrine/Desktop/ReactDemo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stevenperegrine/Desktop/ReactDemo/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls'; //import ethers from 'ethers';\n\nimport { ethers } from 'ethers';\n\nconst axios = require('axios');\n\nvar games;\nvar loadedGame = false;\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    loadedGame = false;\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  } //We call the import wallet function through here so the UI will update\n\n\n  impWallet(seed) {\n    //Runs the generate wallet seed and updates the UI\n    generateWallet(seed);\n    this.forceUpdate();\n  }\n\n  genWallet() {\n    let randomWallet = ethers.Wallet.createRandom();\n    myWallet = randomWallet;\n    SaveWallet();\n    this.forceUpdate();\n  }\n\n  revealKey() {\n    //Reveals the Private key and seed\n    document.getElementById(\"privKey\").innerHTML = \"Private Key: \" + myWallet.privateKey;\n    document.getElementById(\"seed\").innerHTML = \"Seed: \" + myWallet.mnemonic;\n    this.forceUpdate();\n  }\n\n  loadSeed() {\n    //Loads the seed stored in browser\n    try {\n      let ls = new SecureLS();\n      return ls.get('walletSeed').data;\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  switchWallet() {\n    //erases currently stored wallet\n    myWallet = null;\n    let ls = new SecureLS();\n    ls.remove('walletSeed');\n    this.forceUpdate();\n  }\n\n  gameList() {\n    //gets and displays the last 5 games saved\n    const t = this;\n    axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/', {\n      headers: {\n        'APIKEY': '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n      }\n    }).then(function (response) {\n      if (response.data.count >= 5) {\n        games = React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"#\"), React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, \"Name\")), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, \"1\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, response.data.results[0].payload.inputs.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          class: \"animatedbutton greenbutton\",\n          onClick: i => t.loadGame(0),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, \"Select\"))), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, \"2\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, response.data.results[1].payload.inputs.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          class: \"animatedbutton greenbutton\",\n          onClick: i => t.loadGame(1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, \"Select\"))), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, \"3\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, response.data.results[2].payload.inputs.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          class: \"animatedbutton greenbutton\",\n          onClick: i => t.loadGame(2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, \"Select\"))), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"4\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, response.data.results[3].payload.inputs.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          class: \"animatedbutton greenbutton\",\n          onClick: i => t.loadGame(3),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, \"Select\"))), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, \"5\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, response.data.results[4].payload.inputs.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          class: \"animatedbutton greenbutton\",\n          onClick: i => t.loadGame(4),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, \"Select\"))));\n        t.forceUpdate();\n      }\n    });\n  }\n\n  loadGame(gameNum) {\n    //loads and displays a selected game\n    document.body.style.cursor = 'wait';\n    loadedGame = true;\n    const t = this;\n    var turns = [];\n    axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/', {\n      headers: {\n        'APIKEY': '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n      }\n    }).then(function (response) {\n      //since the data is stored in a string and not an array the data needs to be parsed from a string into an array\n      const turn0 = response.data.results[gameNum].payload.inputs.turn0.split(\";\");\n      const turn1 = response.data.results[gameNum].payload.inputs.turn1.split(\";\");\n      const turn2 = response.data.results[gameNum].payload.inputs.turn2.split(\";\");\n      const turn3 = response.data.results[gameNum].payload.inputs.turn3.split(\";\");\n      const turn4 = response.data.results[gameNum].payload.inputs.turn4.split(\";\");\n      const turn5 = response.data.results[gameNum].payload.inputs.turn5.split(\";\");\n      const turn6 = response.data.results[gameNum].payload.inputs.turn6.split(\";\");\n      const turn7 = response.data.results[gameNum].payload.inputs.turn7.split(\";\");\n      const turn8 = response.data.results[gameNum].payload.inputs.turn8.split(\";\");\n      const turn9 = response.data.results[gameNum].payload.inputs.turn9.split(\";\"); //converts the string \"null\" to the type/value of null\n\n      var cell;\n\n      for (cell = 0; cell < turn0.length; cell++) {\n        if (turn0[cell] == \"null\") {\n          turn0[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn1.length; cell++) {\n        if (turn1[cell] == \"null\") {\n          turn1[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn2.length; cell++) {\n        if (turn2[cell] == \"null\") {\n          turn2[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn3.length; cell++) {\n        if (turn3[cell] == \"null\") {\n          turn3[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn4.length; cell++) {\n        if (turn4[cell] == \"null\") {\n          turn4[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn4.length; cell++) {\n        if (turn5[cell] == \"null\") {\n          turn5[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn6.length; cell++) {\n        if (turn6[cell] == \"null\") {\n          turn6[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn7.length; cell++) {\n        if (turn7[cell] == \"null\") {\n          turn7[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn8.length; cell++) {\n        if (turn8[cell] == \"null\") {\n          turn8[cell] = null;\n        }\n      }\n\n      for (cell = 0; cell < turn9.length; cell++) {\n        if (turn9[cell] == \"null\") {\n          turn9[cell] = null;\n        }\n      } //puts all the different turn arrays into a single array of turns\n\n\n      turns = [turn0, turn1, turn2, turn3, turn4, turn5, turn6, turn7, turn8, turn9]; // this.displayData(turns);\n\n      var limit;\n\n      for (var i = 0; i < turns.length; i++) {\n        if (turns[i] == \" \") {\n          turns[i] = turns[i - 1];\n        }\n      } //defines the variables needed for editing match data and erases any moves present\n\n\n      const history = t.state.history.slice(0, t.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      history.length = 0; //applies the loaded game data \n\n      t.setState({\n        history: history.concat([{\n          squares: turns[0]\n        }, {\n          squares: turns[1]\n        }, {\n          squares: turns[2]\n        }, {\n          squares: turns[3]\n        }, {\n          squares: turns[4]\n        }, {\n          squares: turns[5]\n        }, {\n          squares: turns[6]\n        }, {\n          squares: turns[7]\n        }, {\n          squares: turns[8]\n        }, {\n          squares: turns[9]\n        }]),\n        stepNumber: 9,\n        xIsNext: !t.state.xIsNext\n      });\n      document.body.style.cursor = 'auto';\n    });\n  }\n\n  saveGame() {\n    //saves a matches data to the blockchain\n    document.body.style.cursor = 'wait';\n    const t = this;\n\n    if (document.getElementById(\"nameInput\").value == \"\") {\n      document.body.style.cursor = 'auto';\n      alert(\"Please name your game.\");\n      return;\n    }\n\n    if (document.getElementById(\"nameInput\").value.length > 50) {\n      document.body.style.cursor = 'auto';\n      alert(\"Character limit exceeded\\nName must be 50 characters or less\");\n      return;\n    }\n\n    var apiKey = \"8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933\";\n    var moves = [];\n\n    for (var i = 0; i < this.state.history.length; i++) {\n      //since storing arrays on simba is currently not really an option the arrays are put into strings with each index seperated by ';'\n      var parsed = this.state.history[i].squares[0];\n\n      for (var p = 1; p < this.state.history[i].squares.length; p++) {\n        parsed += \";\" + this.state.history[i].squares[p];\n      }\n\n      moves[i] = parsed;\n    }\n\n    var move0 = \" \";\n    var move1 = \" \";\n    var move2 = \" \";\n    var move3 = \" \";\n    var move4 = \" \";\n    var move5 = \" \";\n    var move6 = \" \";\n    var move7 = \" \";\n    var move8 = \" \";\n    var move9 = \" \"; //assign moves to their variables \n\n    for (var i = 0; i < moves.length; i++) {\n      if (i == 0) {\n        move0 = moves[i];\n      }\n\n      if (i == 1) {\n        move1 = moves[i];\n      }\n\n      if (i == 2) {\n        move2 = moves[i];\n      }\n\n      if (i == 3) {\n        move3 = moves[i];\n      }\n\n      if (i == 4) {\n        move4 = moves[i];\n      }\n\n      if (i == 5) {\n        move5 = moves[i];\n      }\n\n      if (i == 6) {\n        move6 = moves[i];\n      }\n\n      if (i == 7) {\n        move7 = moves[i];\n      }\n\n      if (i == 8) {\n        move8 = moves[i];\n      }\n\n      if (i == 9) {\n        move9 = moves[i];\n      }\n    } //setup the form data needed for posting\n\n\n    var myBody = new FormData();\n    myBody.append(\"from\", myWallet.address);\n    myBody.append(\"name\", document.getElementById(\"nameInput\").value);\n    myBody.append(\"turn0\", move0);\n    myBody.append(\"turn1\", move1);\n    myBody.append(\"turn2\", move2);\n    myBody.append(\"turn3\", move3);\n    myBody.append(\"turn4\", move4);\n    myBody.append(\"turn5\", move5);\n    myBody.append(\"turn6\", move6);\n    myBody.append(\"turn7\", move7);\n    myBody.append(\"turn8\", move8);\n    myBody.append(\"turn9\", move9);\n    myBody.append(\"assetId\", \"0x0\"); //the post command itself\n\n    axios.post('https://api.simbachain.com/v1/react_tictactoe/turns/', myBody, {\n      headers: {\n        'APIKEY': '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n      }\n    }).then(function (response) {\n      //Sign the transaction and update the game list\n      //This is where signing takes place\n      if (myWallet) {\n        //we grab the text value from 'signInput' and run the tryParseJson function found below\n        let transaction = response.data.payload.raw;\n        let txnID = response.data.id; //that json is then signed here\n\n        try {\n          delete transaction[\"gas\"];\n          delete transaction[\"from\"];\n        } catch (err) {}\n\n        let signPromise = myWallet.sign(transaction);\n        signPromise.then(signedTransaction => {\n          //after the transaction is signed the signed transaction needs to be submitted\n          let payload = {\n            'payload': signedTransaction\n          };\n          axios.post('https://api.simbachain.com/v1/react_tictactoe/transaction/' + txnID + \"/\", payload, {\n            headers: {\n              'APIKEY': '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }\n          }).then(function (response) {\n            alert(\"Transaction Signed and Submitted\");\n          });\n        });\n      } else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n      }\n\n      t.gameList();\n      document.body.style.cursor = 'auto';\n    }).catch(function (error) {}); //after the game is saved the board is reset        \n\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    history.length = 0;\n    t.setState({\n      history: history.concat([{\n        squares: [null, null, null, null, null, null, null, null, null]\n      }]),\n      stepNumber: 0,\n      xIsNext: !t.state.xIsNext\n    });\n    this.forceUpdate();\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        class: \"button animatedbutton\",\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, desc)));\n    });\n    var wallet = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"Wallet Seed: \", React.createElement(\"input\", {\n      id: \"seedInput\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), \" \"), React.createElement(\"button\", {\n      class: \"bigbutton animatedbutton\",\n      onClick: i => this.impWallet(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"Restore Wallet\"), React.createElement(\"button\", {\n      class: \"bigbutton animatedbutton\",\n      onClick: i => this.genWallet(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, \"Generate Wallet\"));\n    var priv = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    });\n    var localWallet = getWallet();\n\n    try {\n      wallet = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        class: \"bigbutton animatedbutton\",\n        onClick: i => this.revealKey(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, \"Reveal Key\"), React.createElement(\"button\", {\n        class: \"bigbutton animatedbutton\",\n        onClick: i => this.switchWallet(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, \"Switch Wallet\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"walletinfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, \"Public Key: \", localWallet.address), React.createElement(\"p\", {\n        id: \"privKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, \"Private Key:\"), React.createElement(\"p\", {\n        id: \"seed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, \"Seed:\")));\n    } catch (err) {\n      var seed = this.loadSeed();\n\n      if (seed) {\n        this.gameList();\n        this.impWallet(seed);\n      }\n    } //if the game is over display the save to simba button otherwise leave it as the div\n\n\n    var simbaButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    });\n\n    if ((winner || moves.length >= 10) && loadedGame == false) {\n      if (localWallet) {\n        simbaButton = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 593\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 593\n          },\n          __self: this\n        }, \"Game Name: \", React.createElement(\"input\", {\n          id: \"nameInput\",\n          type: \"text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 593\n          },\n          __self: this\n        }), \" \"), \" \", React.createElement(\"button\", {\n          onClick: i => this.saveGame(),\n          class: \"bigbutton animatedbutton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 593\n          },\n          __self: this\n        }, \"Save to SIMBA\"));\n      } else {\n        simbaButton = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 597\n          },\n          __self: this\n        }, \"Generate/Import a wallet to save game to SIMBA\");\n      }\n    }\n\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, games), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, wallet)), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, moves), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, simbaButton)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 643\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nvar myWallet;\n\nfunction getWallet() {\n  //returns the wallet for react\n  return myWallet;\n}\n\nfunction generateWallet(seed) {\n  /*\n  This function generates the wallet based off of the value of the 'seedInput'\n  The seed should be 12 words\n  This seed generates the public and private key of your wallet\n  */\n  //Here we get the 12 word phrase\n  try {\n    var mnemonic = document.getElementById(\"seedInput\").value;\n  } catch {\n    if (seed) {\n      mnemonic = seed;\n    }\n  } //Here the wallet is actually generated\n\n\n  try {\n    let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic); //Here we assign the wallet to the global variable myWallet\n\n    myWallet = mnemonicWallet;\n    SaveWallet();\n  } catch (err) {\n    alert(\"Invalid Seed\");\n  }\n}\n\nfunction signTransaction() {\n  //This is where signing takes place\n  if (myWallet) {\n    //we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value); //that json is then signed here\n\n    let signPromise = myWallet.sign(transaction);\n    signPromise.then(signedTransaction => {\n      document.getElementById(\"signOutput\").value = signedTransaction;\n    });\n  } else {\n    //if no wallet is found this alert runs\n    alert(\"Generate wallet before signing\");\n  }\n}\n\nfunction tryParseJSON(jsonString) {\n  //we parse the json here\n  try {\n    var o = JSON.parse(jsonString); // Handle non-exception-throwing cases:\n    // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n    // but... JSON.parse(null) returns null, and typeof null === \"object\",\n    // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n\n    if (o && typeof o === \"object\") {\n      return o;\n    }\n  } catch (e) {}\n\n  return false;\n}\n\n; //Save and load wallets\n\nfunction SaveWallet() {\n  if (myWallet) {\n    //we save the 12 word wallet seed then on load we will generate everything else\n    //SecureLS is used because it does not store the 12 words in plain text\n    //If you wanted to you could make it where the user had to put in a password to unlock their account\n    let ls = new SecureLS();\n    ls.set('walletSeed', {\n      data: myWallet.mnemonic\n    });\n  } else {\n    alert(\"No wallet present to save\");\n  }\n}\n\nfunction LoadWallet() {\n  //the wallet is loaded and generate wallet is ran to populate the fields\n  //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n  try {\n    let ls = new SecureLS();\n    document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n    generateWallet();\n  } catch (err) {}\n}","map":{"version":3,"sources":["/Users/stevenperegrine/Desktop/ReactDemo/src/index.js"],"names":["React","ReactDOM","SecureLS","ethers","axios","require","games","loadedGame","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","impWallet","seed","generateWallet","forceUpdate","genWallet","randomWallet","Wallet","createRandom","myWallet","SaveWallet","revealKey","document","getElementById","innerHTML","privateKey","mnemonic","loadSeed","ls","get","data","err","alert","switchWallet","remove","gameList","t","headers","then","response","count","results","payload","inputs","name","loadGame","gameNum","body","style","cursor","turns","turn0","split","turn1","turn2","turn3","turn4","turn5","turn6","turn7","turn8","turn9","cell","limit","saveGame","apiKey","moves","parsed","p","move0","move1","move2","move3","move4","move5","move6","move7","move8","move9","myBody","FormData","append","address","post","transaction","raw","txnID","id","signPromise","sign","signedTransaction","catch","error","winner","map","move","desc","wallet","priv","localWallet","getWallet","simbaButton","status","lines","a","b","c","mnemonicWallet","fromMnemonic","signTransaction","tryParseJSON","jsonString","o","JSON","parse","e","set","LoadWallet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls';\n//import ethers from 'ethers';\nimport { ethers } from 'ethers';\nconst axios = require('axios');\nvar games;\nvar loadedGame = false;\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n        <div>\n       \n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n         \n        </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    \n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n       \n      return;\n    }\n       loadedGame = false;\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n    \n    \n    //We call the import wallet function through here so the UI will update\n    \n    impWallet(seed)\n    {\n        //Runs the generate wallet seed and updates the UI\n        generateWallet(seed);\n        this.forceUpdate();\n    }\n    \n    genWallet()\n    {\n        let randomWallet = ethers.Wallet.createRandom();\n        myWallet = randomWallet;\n        SaveWallet()\n        this.forceUpdate();\n    }\n    revealKey()\n    {\n        //Reveals the Private key and seed\n        document.getElementById(\"privKey\").innerHTML = (\"Private Key: \" + myWallet.privateKey);\n        document.getElementById(\"seed\").innerHTML = (\"Seed: \" + myWallet.mnemonic);\n         this.forceUpdate();\n    }\n    \n    loadSeed()\n    {\n        //Loads the seed stored in browser\n        \n     \n         try{\n         let ls = new SecureLS()\n        return ls.get('walletSeed').data;\n      \n         \n         }\n        catch(err){\n            alert(err);\n        } \n    }\n    switchWallet(){\n        //erases currently stored wallet\n        myWallet = null;\n        let ls = new SecureLS()\n        ls.remove('walletSeed')\n        this.forceUpdate();\n    }\n    \n   gameList(){\n       //gets and displays the last 5 games saved\n       const t = this\n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n        headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n            .then(function (response) {\n          if (response.data.count >= 5) {\n            games = <table>\n            <tr>\n            <th>#</th>\n            <th>Name</th>\n    \n            </tr>\n            <tr>\n            <td>1</td>\n            <td>{response.data.results[0].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(0)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>2</td>\n            <td>{response.data.results[1].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(1)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>3</td>\n            <td>{response.data.results[2].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(2)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>4</td>\n            <td>{response.data.results[3].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(3)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>5</td>\n            <td>{response.data.results[4].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(4)}>Select</button></td>\n            </tr>\n \n            </table>\n             t.forceUpdate();\n          }\n    })\n        \n                  }\n  \n\nloadGame(gameNum){\n    //loads and displays a selected game\n        document.body.style.cursor='wait';\n        loadedGame = true;\n        const t = this;\n         \n        var turns = [];\n        \n        \n       \n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n           //since the data is stored in a string and not an array the data needs to be parsed from a string into an array\n            const turn0 = response.data.results[gameNum].payload.inputs.turn0.split(\";\");\n            const turn1 = response.data.results[gameNum].payload.inputs.turn1.split(\";\");\n            const turn2 = response.data.results[gameNum].payload.inputs.turn2.split(\";\");\n            const turn3 = response.data.results[gameNum].payload.inputs.turn3.split(\";\");\n            const turn4 = response.data.results[gameNum].payload.inputs.turn4.split(\";\");\n            const turn5 = response.data.results[gameNum].payload.inputs.turn5.split(\";\");\n            const turn6 = response.data.results[gameNum].payload.inputs.turn6.split(\";\");\n            const turn7 = response.data.results[gameNum].payload.inputs.turn7.split(\";\");\n            const turn8 = response.data.results[gameNum].payload.inputs.turn8.split(\";\");\n            const turn9 = response.data.results[gameNum].payload.inputs.turn9.split(\";\");\n           \n           //converts the string \"null\" to the type/value of null\n           var cell;\n            for (cell = 0;  cell < turn0.length; cell++) {\n             if (turn0[cell] == \"null\") {\n                 turn0[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn1.length; cell++) {\n             if (turn1[cell] == \"null\") {\n                 turn1[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn2.length; cell++) {\n             if (turn2[cell] == \"null\") {\n                 turn2[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn3.length; cell++) {\n             if (turn3[cell] == \"null\") {\n                 turn3[cell] = null\n                 }   \n            }\n           \n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn4[cell] == \"null\") {\n                 turn4[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn5[cell] == \"null\") {\n                 turn5[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn6.length; cell++) {\n             if (turn6[cell] == \"null\") {\n                 turn6[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn7.length; cell++) {\n             if (turn7[cell] == \"null\") {\n                 turn7[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn8.length; cell++) {\n             if (turn8[cell] == \"null\") {\n                 turn8[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn9.length; cell++) {\n             if (turn9[cell] == \"null\") {\n                 turn9[cell] = null\n                 }   \n            }\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n            //puts all the different turn arrays into a single array of turns\n            turns = [turn0,turn1,turn2,turn3,turn4,turn5,turn6,turn7,turn8,turn9];\n      \n           // this.displayData(turns);\n           \n           \n           \n            var limit;\n           for (var i = 0; i < turns.length; i++) { \n               if (turns[i] == \" \")\n               {\n                   turns[i] = turns[i -1];\n                   \n                }\n               \n           }\n          \n           //defines the variables needed for editing match data and erases any moves present\n            const history = t.state.history.slice(0, t.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n           \n           \n          \n           \n             //applies the loaded game data \n            t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: turns[0]\n                    },\n                    {\n                        squares: turns[1]\n                    },\n                    {\n                        squares: turns[2]\n                    },\n                    {\n                        squares: turns[3]\n                    },\n                    {\n                        squares: turns[4]\n                    },\n                    {\n                        squares: turns[5]\n                    },\n                    {\n                        squares: turns[6]\n                    },\n                    {\n                        squares: turns[7]\n                    },\n                    {\n                        squares: turns[8]\n                    },\n                    {\n                        squares: turns[9]\n                    }\n                ]),\n            stepNumber: 9,\n            xIsNext: !t.state.xIsNext\n            }); \n           \n         document.body.style.cursor='auto';  \n            \n        })\n    }\n   \n    \n    saveGame(){\n       //saves a matches data to the blockchain\n         document.body.style.cursor='wait';\n        const t = this;\n        if (document.getElementById(\"nameInput\").value == \"\")\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Please name your game.\");\n                return\n            }\n        \n        if (document.getElementById(\"nameInput\").value.length > 50)\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Character limit exceeded\\nName must be 50 characters or less\");\n                return\n            }\n        \n        \n        \n        var apiKey = \"8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933\";\n       \n        var moves = [];\n        for (var i = 0; i < this.state.history.length; i++)\n            {\n           //since storing arrays on simba is currently not really an option the arrays are put into strings with each index seperated by ';'\n                var parsed = this.state.history[i].squares[0];\n                 for (var p = 1; p < this.state.history[i].squares.length; p++)\n                    {\n                        parsed += \";\" + this.state.history[i].squares[p];\n                    }\n                \n                moves[i] = parsed;\n            }\n        var move0 = \" \";\n        var move1 = \" \";\n        var move2 = \" \";\n        var move3 = \" \";\n        var move4 = \" \";\n        var move5 = \" \";\n        var move6 = \" \";\n        var move7 = \" \";\n        var move8 = \" \";\n        var move9 = \" \";\n       //assign moves to their variables \n         for (var i = 0; i < moves.length; i++)\n             {\n                 \n                 \n                 if (i == 0)\n                 {move0 = moves[i];}\n                 if (i == 1)\n                 {move1 = moves[i];}\n                 if (i == 2)\n                 {move2 = moves[i];}\n                 if (i == 3)\n                 {move3 = moves[i];}\n                 if (i == 4)\n                 {move4 = moves[i];}\n                 if (i == 5)\n                 {move5 = moves[i];}\n                 if (i == 6)\n                 {move6 = moves[i];}\n                 if (i == 7)\n                 {move7 = moves[i];}\n                 if (i == 8)\n                 {move8 = moves[i];}\n                 if (i == 9)\n                 {move9 = moves[i];}\n                 \n             }\n        \n      //setup the form data needed for posting\n        var myBody = new FormData;\n        myBody.append(\"from\",myWallet.address);\n        myBody.append(\"name\",document.getElementById(\"nameInput\").value);\n        myBody.append(\"turn0\",move0);\n        myBody.append(\"turn1\",move1);\n        myBody.append(\"turn2\",move2);\n        myBody.append(\"turn3\",move3);\n        myBody.append(\"turn4\",move4);\n        myBody.append(\"turn5\",move5);\n        myBody.append(\"turn6\",move6);\n        myBody.append(\"turn7\",move7);\n        myBody.append(\"turn8\",move8);\n        myBody.append(\"turn9\",move9);\n        myBody.append(\"assetId\",\"0x0\")\n        \n        \n       \n        \n\n        //the post command itself\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/turns/', myBody, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n  .then(function (response) {\n            //Sign the transaction and update the game list\n            \n            //This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = response.data.payload.raw;\n    let txnID = response.data.id;\n            //that json is then signed here\n   \n            try {\n            delete transaction[\"gas\"];\n            delete transaction[\"from\"];\n            }\n            catch(err)\n                {\n                    \n                }\n    let signPromise = myWallet.sign(transaction);\n           \n            \n    signPromise.then((signedTransaction)=>{\n       \n       \n        \n       //after the transaction is signed the signed transaction needs to be submitted\n        let payload = {\n        'payload': signedTransaction\n      }\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/transaction/' + txnID + \"/\", payload, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n            alert(\"Transaction Signed and Submitted\");\n        });\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n            \n             t.gameList()\n             document.body.style.cursor='auto';\n            \n  })\n  .catch(function (error) {\n  \n  });\n        \n    //after the game is saved the board is reset        \n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n         t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: [null,null,null,null,null,null,null,null,null]\n                    },\n                   \n                ]),\n            stepNumber: 0,\n            xIsNext: !t.state.xIsNext\n            }); \n             this.forceUpdate();\n    }\n    \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    \n   \n      \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <div>\n          <button class=\"button animatedbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            \n           </div>\n        </li>\n      );\n    });\n\n   \n    \n    \n    var wallet = <div><form>Wallet Seed: <input id=\"seedInput\" type=\"text\" /> </form><button class=\"bigbutton animatedbutton\" onClick={i => this.impWallet()}>Restore Wallet</button><button class=\"bigbutton animatedbutton\" onClick={i => this.genWallet()}>Generate Wallet</button></div>\n     \n        var priv = <p></p>\n\n    var localWallet = getWallet()\n    try {  wallet = <div><button class=\"bigbutton animatedbutton\" onClick={i => this.revealKey()}>Reveal Key</button><button class=\"bigbutton animatedbutton\" onClick={i => this.switchWallet()}>Switch Wallet</button><br/>\n        <br/><br/>\n        <br/><div class = \"walletinfo\"><p>Public Key: {localWallet.address}</p><p id=\"privKey\">Private Key:</p><p id=\"seed\">Seed:</p></div></div> }\n    catch(err)\n       {\n           \n         \n        var seed = this.loadSeed(); \n         if (seed)\n             {\n                 this.gameList()\n                 this.impWallet(seed)\n             }\n       }\n         \n         \n          //if the game is over display the save to simba button otherwise leave it as the div\n    var simbaButton = <div></div>\n    if ((winner || moves.length >= 10) && loadedGame == false)\n        {\n        if (localWallet)\n            {\n     simbaButton = <div><form>Game Name: <input id=\"nameInput\" type=\"text\" /> </form> <button onClick={i => this.saveGame()} class=\"bigbutton animatedbutton\">Save to SIMBA</button></div>\n            }\n            else\n                {\n                  simbaButton = <p>Generate/Import a wallet to save game to SIMBA</p>\n                }\n        }\n         \n         \n      \n   \n\n\n    let status;\n     if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n          \n           return (\n        \n      <div className=\"game\">\n                 \n              \n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        <br/>\n        <br/>\n        <div>{games}</div>\n    \n        <div>{wallet}</div>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n            <div>{simbaButton}</div>\n        </div>\n      </div>\n      \n    );  \n        \n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    \n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n\nvar myWallet;\n    function getWallet(){\n        //returns the wallet for react\n        return myWallet;\n    }\n\n  \n    \n    function generateWallet(seed) {\n        \n    \n/*\nThis function generates the wallet based off of the value of the 'seedInput'\nThe seed should be 12 words\nThis seed generates the public and private key of your wallet\n*/\n     \n//Here we get the 12 word phrase\n try{       \nvar mnemonic = document.getElementById(\"seedInput\").value;\n }\ncatch\n    {\nif (seed)\n    {\n       mnemonic = seed \n    }\n    }\n   \n//Here the wallet is actually generated\n        \ntry {\nlet mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);        \n//Here we assign the wallet to the global variable myWallet\nmyWallet = mnemonicWallet;\n    SaveWallet()\n    \n    \n    \n    \n}\n        catch(err){\n            alert(\"Invalid Seed\");\n        }\n    \n    }\n\nfunction signTransaction() {\n//This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value);\n            //that json is then signed here\n    let signPromise = myWallet.sign (transaction);\n    signPromise.then((signedTransaction)=>{\n    document.getElementById(\"signOutput\").value = signedTransaction;\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n}\n    function tryParseJSON (jsonString){\n        //we parse the json here\n      try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns null, and typeof null === \"object\",\n        // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n        if (o && typeof o === \"object\") {\n          return o;\n        }\n      }\n      catch (e) { }\n\n      return false;\n    };\n    \n    //Save and load wallets\n    \n    function SaveWallet() {\n        if (myWallet)\n            {\n        //we save the 12 word wallet seed then on load we will generate everything else\n        //SecureLS is used because it does not store the 12 words in plain text\n        //If you wanted to you could make it where the user had to put in a password to unlock their account\n        let ls = new SecureLS();\n        ls.set('walletSeed', {data:myWallet.mnemonic});\n            }\n        else{\n            alert(\"No wallet present to save\");\n        }\n    }\n    function LoadWallet() {\n        //the wallet is loaded and generate wallet is ran to populate the fields\n        //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n       \n        try{\n         let ls = new SecureLS()\n        document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n        generateWallet()}\n        catch(err){\n            \n        }\n    }"]},"metadata":{},"sourceType":"module"}