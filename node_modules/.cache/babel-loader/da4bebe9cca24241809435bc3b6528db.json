{"ast":null,"code":"import _slicedToArray from \"/Users/stevenperegrine/Desktop/Web Projects/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stevenperegrine/Desktop/Web Projects/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls'; //import ethers from 'ethers';\n\nimport { ethers } from 'ethers';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  } //We call the generate wallet function through here so the UI will update\n\n\n  genWallet(seed) {\n    generateWallet(seed);\n    this.forceUpdate();\n  }\n\n  revealKey() {\n    document.getElementById(\"privKey\").innerHTML = \"Private Key: \" + myWallet.privateKey;\n    document.getElementById(\"seed\").innerHTML = \"Seed: \" + myWallet.mnemonic;\n    this.forceUpdate();\n  }\n\n  loadSeed() {\n    try {\n      let ls = new SecureLS();\n      return ls.get('walletSeed').data;\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  switchWallet() {\n    myWallet = null;\n    let ls = new SecureLS();\n    ls.remove('walletSeed');\n    this.forceUpdate();\n  }\n\n  hardcodedload() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    history.length = 0;\n    this.setState({\n      history: history.concat([{\n        squares: [null, null, null, null, null, null, null, null, null]\n      }, {\n        squares: [\"X\", null, null, null, null, null, null, null, null]\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    }); //  let hardcodedObject =\n    //    [[null,null,null,null,null,null,null,null,null][\"X\",\"O\",\"X\",null,null,null,null,null,null]]\n  }\n\n  saveGame() {\n    var apiKey = \"8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933\";\n    console.log(\"FROM\");\n    console.log(myWallet.address);\n    console.log(\"API KEY\");\n    console.log(apiKey);\n    console.log(\"MOVES\");\n    var moves = [];\n\n    for (var i = 0; i < this.state.history.length; i++) {\n      var parsed = this.state.history[i].squares[0];\n\n      for (var p = 1; p < this.state.history[i].squares.length; p++) {\n        parsed += \";\" + this.state.history[i].squares[p];\n      }\n\n      moves[i] = parsed;\n    }\n\n    var move0 = \" \";\n    var move1 = \" \";\n    var move2 = \" \";\n    var move3 = \" \";\n    var move4 = \" \";\n    var move5 = \" \";\n    var move6 = \" \";\n    var move7 = \" \";\n    var move8 = \" \";\n    var move9 = \" \";\n\n    for (var i = 0; i < moves.length; i++) {\n      console.log(moves[i]);\n\n      if (i = 0) {\n        move0 = moves[i];\n      }\n\n      if (i = 1) {\n        move1 = moves[i];\n      }\n\n      if (i = 2) {\n        move2 = moves[i];\n      }\n\n      if (i = 3) {\n        move3 = moves[i];\n      }\n\n      if (i = 4) {\n        move4 = moves[i];\n      }\n\n      if (i = 5) {\n        move5 = moves[i];\n      }\n\n      if (i = 6) {\n        move6 = moves[i];\n      }\n\n      if (i = 7) {\n        move7 = moves[i];\n      }\n\n      if (i = 8) {\n        move8 = moves[i];\n      }\n\n      if (i = 9) {\n        move9 = moves[i];\n      }\n    }\n\n    var myBody = {\n      from: myWallet.address,\n      name: \"Test Game\",\n      turn0: move0,\n      turn1: move1,\n      turn2: move2,\n      turn3: move3,\n      turn4: move4,\n      turn5: move5,\n      turn6: move6,\n      turn7: move7,\n      turn8: move8,\n      turn9: move9\n    };\n\n    const userAction = async () => {\n      const response = await fetch('https://api.simbachain.com/v1/react_tictactoe/#/contract_methods/turns', {\n        method: 'POST',\n        body: myBody,\n        // string or object\n        headers: {\n          'Content-Type': 'application/json',\n          'APIKEY': apiKey\n        }\n      });\n      const myJson = await response.json(); //extract JSON from the http response\n      // do something with myJson\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        class: \"button animatedbutton\",\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, desc)));\n    }); //if the game is over display the save to simba button otherwise leave it as the div\n\n    var simbaButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    });\n\n    if (winner || moves.length >= 10) {\n      simbaButton = React.createElement(\"button\", {\n        onClick: i => this.saveGame(),\n        class: \"bigbutton animatedbutton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"Save to SIMBA\");\n    }\n\n    var wallet = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Wallet Seed: \", React.createElement(\"input\", {\n      id: \"seedInput\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), \" \"), React.createElement(\"button\", {\n      onClick: i => this.genWallet(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Generate Wallet\"));\n    var priv = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    });\n    var localWallet = getWallet();\n\n    try {\n      wallet = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Public Key: \", localWallet.address), React.createElement(\"p\", {\n        id: \"privKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Private Key:\"), React.createElement(\"p\", {\n        id: \"seed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Seed:\"), React.createElement(\"button\", {\n        onClick: i => this.revealKey(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Reveal Key\"), React.createElement(\"button\", {\n        onClick: i => this.switchWallet(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Switch Wallet\"));\n    } catch (err) {\n      var seed = this.loadSeed();\n\n      if (seed) {\n        this.genWallet(seed);\n      }\n    }\n\n    let status;\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, wallet), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: i => this.hardcodedload(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Load game\"))), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, moves), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, simbaButton)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 318\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nvar myWallet;\n\nfunction getWallet() {\n  //returns the wallet for react\n  return myWallet;\n}\n\nfunction generateWallet(seed) {\n  console.log(\"start generate wallet\");\n  console.log(Game.myWallet);\n  /*\n  This function generates the wallet based off of the value of the 'seedInput'\n  The seed should be 12 words\n  This seed generates the public and private key of your wallet\n  */\n  //Here we get the 12 word phrase\n\n  try {\n    var mnemonic = document.getElementById(\"seedInput\").value;\n  } catch {\n    if (seed) {\n      mnemonic = seed;\n    }\n  } //Here the wallet is actually generated\n\n\n  try {\n    let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic); //Here we assign the wallet to the global variable myWallet\n\n    myWallet = mnemonicWallet;\n    SaveWallet();\n    console.log(myWallet);\n    console.log(\"end generate wallet\");\n  } catch (err) {\n    alert(\"Invalid Seed\");\n  }\n}\n\nfunction signTransaction() {\n  //This is where signing takes place\n  if (myWallet) {\n    //we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value); //that json is then signed here\n\n    let signPromise = myWallet.sign(transaction);\n    signPromise.then(signedTransaction => {\n      document.getElementById(\"signOutput\").value = signedTransaction;\n    });\n  } else {\n    //if no wallet is found this alert runs\n    alert(\"Generate wallet before signing\");\n  }\n}\n\nfunction tryParseJSON(jsonString) {\n  //we parse the json here\n  try {\n    var o = JSON.parse(jsonString); // Handle non-exception-throwing cases:\n    // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n    // but... JSON.parse(null) returns null, and typeof null === \"object\",\n    // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n\n    if (o && typeof o === \"object\") {\n      return o;\n    }\n  } catch (e) {}\n\n  return false;\n}\n\n; //Save and load wallets\n\nfunction SaveWallet() {\n  if (myWallet) {\n    //we save the 12 word wallet seed then on load we will generate everything else\n    //SecureLS is used because it does not store the 12 words in plain text\n    //If you wanted to you could make it where the user had to put in a password to unlock their account\n    let ls = new SecureLS();\n    ls.set('walletSeed', {\n      data: myWallet.mnemonic\n    });\n  } else {\n    alert(\"No wallet present to save\");\n  }\n}\n\nfunction LoadWallet() {\n  //the wallet is loaded and generate wallet is ran to populate the fields\n  //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n  try {\n    let ls = new SecureLS();\n    document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n    generateWallet();\n  } catch (err) {}\n}","map":{"version":3,"sources":["/Users/stevenperegrine/Desktop/Web Projects/my-app/src/index.js"],"names":["React","ReactDOM","SecureLS","ethers","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","genWallet","seed","generateWallet","forceUpdate","revealKey","document","getElementById","innerHTML","myWallet","privateKey","mnemonic","loadSeed","ls","get","data","err","alert","switchWallet","remove","hardcodedload","saveGame","apiKey","console","log","address","moves","parsed","p","move0","move1","move2","move3","move4","move5","move6","move7","move8","move9","myBody","from","name","turn0","turn1","turn2","turn3","turn4","turn5","turn6","turn7","turn8","turn9","userAction","response","fetch","method","body","headers","myJson","json","winner","map","move","desc","simbaButton","wallet","priv","localWallet","getWallet","status","lines","a","b","c","mnemonicWallet","Wallet","fromMnemonic","SaveWallet","signTransaction","transaction","tryParseJSON","signPromise","sign","then","signedTransaction","jsonString","o","JSON","parse","e","set","LoadWallet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls';\n//import ethers from 'ethers';\nimport { ethers } from 'ethers';\n\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n        <div>\n       \n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n         \n        </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n    \n    \n    //We call the generate wallet function through here so the UI will update\n    \n    genWallet(seed)\n    {\n        generateWallet(seed);\n        this.forceUpdate();\n    }\n    revealKey()\n    {\n        document.getElementById(\"privKey\").innerHTML = (\"Private Key: \" + myWallet.privateKey);\n        document.getElementById(\"seed\").innerHTML = (\"Seed: \" + myWallet.mnemonic);\n         this.forceUpdate();\n    }\n    \n    loadSeed()\n    {\n         try{\n         let ls = new SecureLS()\n        return ls.get('walletSeed').data;\n      \n         \n         }\n        catch(err){\n            alert(err);\n        } \n    }\n    switchWallet(){\n        myWallet = null;\n        let ls = new SecureLS()\n        ls.remove('walletSeed')\n        this.forceUpdate();\n    }\n    hardcodedload(){\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    \n   history.length = 0;\n    this.setState({\n      history: history.concat([\n        {\n          squares: [null,null,null,null,null,null,null,null,null]\n        },\n          {\n          squares: [\"X\",null,null,null,null,null,null,null,null]\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n     //  let hardcodedObject =\n       //    [[null,null,null,null,null,null,null,null,null][\"X\",\"O\",\"X\",null,null,null,null,null,null]]\n       \n    }\n    \n    saveGame(){\n        var apiKey = \"8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933\";\n        console.log(\"FROM\");\n        console.log(myWallet.address);\n        console.log(\"API KEY\");\n        console.log(apiKey);\n        console.log(\"MOVES\");\n        var moves = [];\n        for (var i = 0; i < this.state.history.length; i++)\n            {\n           \n                var parsed = this.state.history[i].squares[0];\n                 for (var p = 1; p < this.state.history[i].squares.length; p++)\n                    {\n                        parsed += \";\" + this.state.history[i].squares[p];\n                    }\n                \n                moves[i] = parsed;\n            }\n        var move0 = \" \";\n        var move1 = \" \";\n        var move2 = \" \";\n        var move3 = \" \";\n        var move4 = \" \";\n        var move5 = \" \";\n        var move6 = \" \";\n        var move7 = \" \";\n        var move8 = \" \";\n        var move9 = \" \";\n        \n         for (var i = 0; i < moves.length; i++)\n             {\n                 console.log(moves[i]);\n                 if (i = 0)\n                 {move0 = moves[i];}\n                 if (i = 1)\n                 {move1 = moves[i];}\n                 if (i = 2)\n                 {move2 = moves[i];}\n                 if (i = 3)\n                 {move3 = moves[i];}\n                 if (i = 4)\n                 {move4 = moves[i];}\n                 if (i = 5)\n                 {move5 = moves[i];}\n                 if (i = 6)\n                 {move6 = moves[i];}\n                 if (i = 7)\n                 {move7 = moves[i];}\n                 if (i = 8)\n                 {move8 = moves[i];}\n                 if (i = 9)\n                 {move9 = moves[i];}\n                 \n             }\n        \n        var myBody = {  from: myWallet.address,\n                        name: \"Test Game\",\n                        turn0: move0,\n                        turn1: move1,\n                        turn2: move2,\n                        turn3: move3,\n                        turn4: move4,\n                        turn5: move5,\n                        turn6: move6,\n                        turn7: move7,\n                        turn8: move8,\n                        turn9: move9}\n        const userAction = async () => {\n            const response = await fetch('https://api.simbachain.com/v1/react_tictactoe/#/contract_methods/turns', {\n            method: 'POST',\n            body: myBody, // string or object\n            headers:{\n                'Content-Type': 'application/json',\n                'APIKEY': apiKey\n            }\n            });\n            const myJson = await response.json(); //extract JSON from the http response\n            // do something with myJson\n            }\n        \n        \n        \n    }\n    \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <div>\n          <button class=\"button animatedbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            \n           </div>\n        </li>\n      );\n    });\n\n    //if the game is over display the save to simba button otherwise leave it as the div\n    var simbaButton = <div></div>\n    if (winner || moves.length >= 10)\n        {\n     simbaButton = <button onClick={i => this.saveGame()} class=\"bigbutton animatedbutton\">Save to SIMBA</button>\n        }\n    \n    \n    var wallet = <div><form>Wallet Seed: <input id=\"seedInput\" type=\"text\" /> </form><button onClick={i => this.genWallet()}>Generate Wallet</button></div>\n     \n        var priv = <p></p>\n\n    var localWallet = getWallet()\n    try {  wallet = <div><p>Public Key: {localWallet.address}</p><p id=\"privKey\">Private Key:</p><p id=\"seed\">Seed:</p><button onClick={i => this.revealKey()}>Reveal Key</button><button onClick={i => this.switchWallet()}>Switch Wallet</button></div> }\n    catch(err)\n       {\n         var seed = this.loadSeed(); \n         if (seed)\n             {\n                 this.genWallet(seed)\n             }\n       }\n         \n         \n      \n   \n\n\n\n    let status;\n    \n          \n           return (\n        \n      <div className=\"game\">\n                 \n              \n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        <br/>\n        <br/>\n        <div>{wallet}</div>\n        <div><button onClick={i => this.hardcodedload()}>Load game</button></div>\n    \n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n            <div>{simbaButton}</div>\n        </div>\n      </div>\n      \n    );  \n        \n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    \n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n\nvar myWallet;\n    function getWallet(){\n        //returns the wallet for react\n        return myWallet;\n    }\n\n  \n    \n    function generateWallet(seed) {\n         console.log(\"start generate wallet\");\n         console.log(Game.myWallet);\n    \n/*\nThis function generates the wallet based off of the value of the 'seedInput'\nThe seed should be 12 words\nThis seed generates the public and private key of your wallet\n*/\n     \n//Here we get the 12 word phrase\n try{       \nvar mnemonic = document.getElementById(\"seedInput\").value;\n }\ncatch\n    {\nif (seed)\n    {\n       mnemonic = seed \n    }\n    }\n   \n//Here the wallet is actually generated\n        \ntry {\nlet mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);        \n//Here we assign the wallet to the global variable myWallet\nmyWallet = mnemonicWallet;\n    SaveWallet()\n    \n        console.log(myWallet);\n         console.log(\"end generate wallet\");\n    \n    \n}\n        catch(err){\n            alert(\"Invalid Seed\");\n        }\n    \n    }\n\nfunction signTransaction() {\n//This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value);\n            //that json is then signed here\n    let signPromise = myWallet.sign (transaction);\n    signPromise.then((signedTransaction)=>{\n    document.getElementById(\"signOutput\").value = signedTransaction;\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n}\n    function tryParseJSON (jsonString){\n        //we parse the json here\n      try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns null, and typeof null === \"object\",\n        // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n        if (o && typeof o === \"object\") {\n          return o;\n        }\n      }\n      catch (e) { }\n\n      return false;\n    };\n    \n    //Save and load wallets\n    \n    function SaveWallet() {\n        if (myWallet)\n            {\n        //we save the 12 word wallet seed then on load we will generate everything else\n        //SecureLS is used because it does not store the 12 words in plain text\n        //If you wanted to you could make it where the user had to put in a password to unlock their account\n        let ls = new SecureLS();\n        ls.set('walletSeed', {data:myWallet.mnemonic});\n            }\n        else{\n            alert(\"No wallet present to save\");\n        }\n    }\n    function LoadWallet() {\n        //the wallet is loaded and generate wallet is ran to populate the fields\n        //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n       \n        try{\n         let ls = new SecureLS()\n        document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n        generateWallet()}\n        catch(err){\n            \n        }\n    }\n"]},"metadata":{},"sourceType":"module"}