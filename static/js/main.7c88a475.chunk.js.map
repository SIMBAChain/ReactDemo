{"version":3,"sources":["index.js"],"names":["games","axios","require","loadedGame","Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","myWallet","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","seed","generateWallet","forceUpdate","document","getElementById","innerHTML","privateKey","mnemonic","gameList","SecureLS","get","data","err","alert","remove","t","headers","APIKEY","then","response","count","results","payload","inputs","name","class","loadGame","gameNum","body","style","cursor","turns","cell","turn0","split","turn1","turn2","turn3","turn4","turn5","turn6","turn7","turn8","turn9","moves","parsed","p","move0","move1","move2","move3","move4","move5","move6","move7","move8","move9","myBody","FormData","append","address","post","transaction","raw","txnID","id","sign","signedTransaction","catch","error","_this3","current","winner","map","move","desc","key","jumpTo","simbaButton","type","saveGame","status","wallet","genWallet","localWallet","revealKey","switchWallet","loadSeed","handleClick","lines","_lines$i","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","_unused","mnemonicWallet","ethers","Wallet","fromMnemonic","ls","set","SaveWallet","ReactDOM","render"],"mappings":"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","file":"static/js/main.7c88a475.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls';\n//import ethers from 'ethers';\nimport { ethers } from 'ethers';\nconst axios = require('axios');\nvar games;\nvar loadedGame = false;\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n        <div>\n       \n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n         \n        </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    \n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n       \n      return;\n    }\n       loadedGame = false;\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n    \n    \n    //We call the generate wallet function through here so the UI will update\n    \n    genWallet(seed)\n    {\n        //Runs the generate wallet seed and updates the UI\n        generateWallet(seed);\n        this.forceUpdate();\n    }\n    revealKey()\n    {\n        //Reveals the Private key and seed\n        document.getElementById(\"privKey\").innerHTML = (\"Private Key: \" + myWallet.privateKey);\n        document.getElementById(\"seed\").innerHTML = (\"Seed: \" + myWallet.mnemonic);\n         this.forceUpdate();\n    }\n    \n    loadSeed()\n    {\n        //Loads the seed stored in browser\n        this.gameList()\n     \n         try{\n         let ls = new SecureLS()\n        return ls.get('walletSeed').data;\n      \n         \n         }\n        catch(err){\n            alert(err);\n        } \n    }\n    switchWallet(){\n        //erases currently stored wallet\n        myWallet = null;\n        let ls = new SecureLS()\n        ls.remove('walletSeed')\n        this.forceUpdate();\n    }\n    \n   gameList(){\n       //gets and displays the last 5 games saved\n       const t = this\n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n        headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n            .then(function (response) {\n          if (response.data.count >= 5) {\n            games = <table>\n            <tr>\n            <th>#</th>\n            <th>Name</th>\n    \n            </tr>\n            <tr>\n            <td>1</td>\n            <td>{response.data.results[0].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(0)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>2</td>\n            <td>{response.data.results[1].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(1)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>3</td>\n            <td>{response.data.results[2].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(2)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>4</td>\n            <td>{response.data.results[3].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(3)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>5</td>\n            <td>{response.data.results[4].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(4)}>Select</button></td>\n            </tr>\n \n            </table>\n             t.forceUpdate();\n          }\n    })\n        \n                  }\n  \n\nloadGame(gameNum){\n    //loads and displays a selected game\n        document.body.style.cursor='wait';\n        loadedGame = true;\n        const t = this;\n         \n        var turns = [];\n        \n        \n       \n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n           //since the data is stored in a string and not an array the data needs to be parsed from a string into an array\n            const turn0 = response.data.results[gameNum].payload.inputs.turn0.split(\";\");\n            const turn1 = response.data.results[gameNum].payload.inputs.turn1.split(\";\");\n            const turn2 = response.data.results[gameNum].payload.inputs.turn2.split(\";\");\n            const turn3 = response.data.results[gameNum].payload.inputs.turn3.split(\";\");\n            const turn4 = response.data.results[gameNum].payload.inputs.turn4.split(\";\");\n            const turn5 = response.data.results[gameNum].payload.inputs.turn5.split(\";\");\n            const turn6 = response.data.results[gameNum].payload.inputs.turn6.split(\";\");\n            const turn7 = response.data.results[gameNum].payload.inputs.turn7.split(\";\");\n            const turn8 = response.data.results[gameNum].payload.inputs.turn8.split(\";\");\n            const turn9 = response.data.results[gameNum].payload.inputs.turn9.split(\";\");\n           \n           //converts the string \"null\" to the type/value of null\n           var cell;\n            for (cell = 0;  cell < turn0.length; cell++) {\n             if (turn0[cell] == \"null\") {\n                 turn0[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn1.length; cell++) {\n             if (turn1[cell] == \"null\") {\n                 turn1[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn2.length; cell++) {\n             if (turn2[cell] == \"null\") {\n                 turn2[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn3.length; cell++) {\n             if (turn3[cell] == \"null\") {\n                 turn3[cell] = null\n                 }   \n            }\n           \n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn4[cell] == \"null\") {\n                 turn4[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn5[cell] == \"null\") {\n                 turn5[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn6.length; cell++) {\n             if (turn6[cell] == \"null\") {\n                 turn6[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn7.length; cell++) {\n             if (turn7[cell] == \"null\") {\n                 turn7[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn8.length; cell++) {\n             if (turn8[cell] == \"null\") {\n                 turn8[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn9.length; cell++) {\n             if (turn9[cell] == \"null\") {\n                 turn9[cell] = null\n                 }   \n            }\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n            //puts all the different turn arrays into a single array of turns\n            turns = [turn0,turn1,turn2,turn3,turn4,turn5,turn6,turn7,turn8,turn9];\n      \n           // this.displayData(turns);\n           \n           \n           \n            var limit;\n           for (var i = 0; i < turns.length; i++) { \n               if (turns[i] == \" \")\n               {\n                   turns[i] = turns[i -1];\n                   \n                }\n               \n           }\n          \n           //defines the variables needed for editing match data and erases any moves present\n            const history = t.state.history.slice(0, t.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n           \n           \n          \n           \n             //applies the loaded game data \n            t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: turns[0]\n                    },\n                    {\n                        squares: turns[1]\n                    },\n                    {\n                        squares: turns[2]\n                    },\n                    {\n                        squares: turns[3]\n                    },\n                    {\n                        squares: turns[4]\n                    },\n                    {\n                        squares: turns[5]\n                    },\n                    {\n                        squares: turns[6]\n                    },\n                    {\n                        squares: turns[7]\n                    },\n                    {\n                        squares: turns[8]\n                    },\n                    {\n                        squares: turns[9]\n                    }\n                ]),\n            stepNumber: 9,\n            xIsNext: !t.state.xIsNext\n            }); \n           \n         document.body.style.cursor='auto';  \n            \n        })\n    }\n   \n    \n    saveGame(){\n       //saves a matches data to the blockchain\n         document.body.style.cursor='wait';\n        const t = this;\n        if (document.getElementById(\"nameInput\").value == \"\")\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Please name your game.\");\n                return\n            }\n        \n        if (document.getElementById(\"nameInput\").value.length > 50)\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Character limit exceeded\\nName must be 50 characters or less\");\n                return\n            }\n        \n        \n        \n        var apiKey = \"8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933\";\n       \n        var moves = [];\n        for (var i = 0; i < this.state.history.length; i++)\n            {\n           //since storing arrays on simba is currently not really an option the arrays are put into strings with each index seperated by ';'\n                var parsed = this.state.history[i].squares[0];\n                 for (var p = 1; p < this.state.history[i].squares.length; p++)\n                    {\n                        parsed += \";\" + this.state.history[i].squares[p];\n                    }\n                \n                moves[i] = parsed;\n            }\n        var move0 = \" \";\n        var move1 = \" \";\n        var move2 = \" \";\n        var move3 = \" \";\n        var move4 = \" \";\n        var move5 = \" \";\n        var move6 = \" \";\n        var move7 = \" \";\n        var move8 = \" \";\n        var move9 = \" \";\n       //assign moves to their variables \n         for (var i = 0; i < moves.length; i++)\n             {\n                 \n                 \n                 if (i == 0)\n                 {move0 = moves[i];}\n                 if (i == 1)\n                 {move1 = moves[i];}\n                 if (i == 2)\n                 {move2 = moves[i];}\n                 if (i == 3)\n                 {move3 = moves[i];}\n                 if (i == 4)\n                 {move4 = moves[i];}\n                 if (i == 5)\n                 {move5 = moves[i];}\n                 if (i == 6)\n                 {move6 = moves[i];}\n                 if (i == 7)\n                 {move7 = moves[i];}\n                 if (i == 8)\n                 {move8 = moves[i];}\n                 if (i == 9)\n                 {move9 = moves[i];}\n                 \n             }\n        \n      //setup the form data needed for posting\n        var myBody = new FormData;\n        myBody.append(\"from\",myWallet.address);\n        myBody.append(\"name\",document.getElementById(\"nameInput\").value);\n        myBody.append(\"turn0\",move0);\n        myBody.append(\"turn1\",move1);\n        myBody.append(\"turn2\",move2);\n        myBody.append(\"turn3\",move3);\n        myBody.append(\"turn4\",move4);\n        myBody.append(\"turn5\",move5);\n        myBody.append(\"turn6\",move6);\n        myBody.append(\"turn7\",move7);\n        myBody.append(\"turn8\",move8);\n        myBody.append(\"turn9\",move9);\n        myBody.append(\"assetId\",\"0x0\")\n        \n        \n       \n        \n\n        //the post command itself\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/turns/', myBody, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n  .then(function (response) {\n            //Sign the transaction and update the game list\n            \n            //This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = response.data.payload.raw;\n    let txnID = response.data.id;\n            //that json is then signed here\n   \n            try {\n            delete transaction[\"gas\"];\n            delete transaction[\"from\"];\n            }\n            catch(err)\n                {\n                    \n                }\n    let signPromise = myWallet.sign(transaction);\n           \n            \n    signPromise.then((signedTransaction)=>{\n       \n       \n        \n       //after the transaction is signed the signed transaction needs to be submitted\n        let payload = {\n        'payload': signedTransaction\n      }\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/transaction/' + txnID + \"/\", payload, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n            alert(\"Transaction Signed and Submitted\");\n        });\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n            \n             t.gameList()\n             document.body.style.cursor='auto';\n            \n  })\n  .catch(function (error) {\n  \n  });\n        \n    //after the game is saved the board is reset        \n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n         t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: [null,null,null,null,null,null,null,null,null]\n                    },\n                   \n                ]),\n            stepNumber: 0,\n            xIsNext: !t.state.xIsNext\n            }); \n             this.forceUpdate();\n    }\n    \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    \n   \n      \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <div>\n          <button class=\"button animatedbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            \n           </div>\n        </li>\n      );\n    });\n\n    //if the game is over display the save to simba button otherwise leave it as the div\n    var simbaButton = <div></div>\n    if ((winner || moves.length >= 10) && loadedGame == false)\n        {\n     simbaButton = <div><form>Game Name: <input id=\"nameInput\" type=\"text\" /> </form> <button onClick={i => this.saveGame()} class=\"bigbutton animatedbutton\">Save to SIMBA</button></div>\n        }\n    \n    \n    var wallet = <div><form>Wallet Seed: <input id=\"seedInput\" type=\"text\" /> </form><button class=\"bigbutton animatedbutton\" onClick={i => this.genWallet()}>Generate Wallet</button></div>\n     \n        var priv = <p></p>\n\n    var localWallet = getWallet()\n    try {  wallet = <div><button class=\"bigbutton animatedbutton\" onClick={i => this.revealKey()}>Reveal Key</button><button class=\"bigbutton animatedbutton\" onClick={i => this.switchWallet()}>Switch Wallet</button><div class = \"walletinfo\"><p>Public Key: {localWallet.address}</p><p id=\"privKey\">Private Key:</p><p id=\"seed\">Seed:</p></div></div> }\n    catch(err)\n       {\n           \n         var seed = this.loadSeed(); \n         if (seed)\n             {\n                 this.genWallet(seed)\n             }\n       }\n         \n         \n      \n   \n\n\n    let status;\n     if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n          \n           return (\n        \n      <div className=\"game\">\n                 \n              \n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        <br/>\n        <br/>\n        <div>{games}</div>\n        <div>{wallet}</div>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n            <div>{simbaButton}</div>\n        </div>\n      </div>\n      \n    );  \n        \n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    \n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n\nvar myWallet;\n    function getWallet(){\n        //returns the wallet for react\n        return myWallet;\n    }\n\n  \n    \n    function generateWallet(seed) {\n        \n    \n/*\nThis function generates the wallet based off of the value of the 'seedInput'\nThe seed should be 12 words\nThis seed generates the public and private key of your wallet\n*/\n     \n//Here we get the 12 word phrase\n try{       \nvar mnemonic = document.getElementById(\"seedInput\").value;\n }\ncatch\n    {\nif (seed)\n    {\n       mnemonic = seed \n    }\n    }\n   \n//Here the wallet is actually generated\n        \ntry {\nlet mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);        \n//Here we assign the wallet to the global variable myWallet\nmyWallet = mnemonicWallet;\n    SaveWallet()\n    \n    \n    \n    \n}\n        catch(err){\n            alert(\"Invalid Seed\");\n        }\n    \n    }\n\nfunction signTransaction() {\n//This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value);\n            //that json is then signed here\n    let signPromise = myWallet.sign (transaction);\n    signPromise.then((signedTransaction)=>{\n    document.getElementById(\"signOutput\").value = signedTransaction;\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n}\n    function tryParseJSON (jsonString){\n        //we parse the json here\n      try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns null, and typeof null === \"object\",\n        // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n        if (o && typeof o === \"object\") {\n          return o;\n        }\n      }\n      catch (e) { }\n\n      return false;\n    };\n    \n    //Save and load wallets\n    \n    function SaveWallet() {\n        if (myWallet)\n            {\n        //we save the 12 word wallet seed then on load we will generate everything else\n        //SecureLS is used because it does not store the 12 words in plain text\n        //If you wanted to you could make it where the user had to put in a password to unlock their account\n        let ls = new SecureLS();\n        ls.set('walletSeed', {data:myWallet.mnemonic});\n            }\n        else{\n            alert(\"No wallet present to save\");\n        }\n    }\n    function LoadWallet() {\n        //the wallet is loaded and generate wallet is ran to populate the fields\n        //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n       \n        try{\n         let ls = new SecureLS()\n        document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n        generateWallet()}\n        catch(err){\n            \n        }\n    }"],"sourceRoot":""}