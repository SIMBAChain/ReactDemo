{"version":3,"sources":["index.js"],"names":["games","axios","require","loadedGame","Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","myWallet","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","seed","generateWallet","forceUpdate","randomWallet","ethers","Wallet","createRandom","SaveWallet","payload","account","String","address","currency","post","headers","APIKEY","document","getElementById","innerHTML","privateKey","mnemonic","SecureLS","get","data","err","alert","remove","t","then","response","count","results","inputs","name","class","loadGame","gameNum","body","style","cursor","turns","cell","turn0","split","turn1","turn2","turn3","turn4","turn5","turn6","turn7","turn8","turn9","moves","parsed","p","move0","move1","move2","move3","move4","move5","move6","move7","move8","move9","myBody","FormData","append","transaction","raw","txnID","id","sign","signedTransaction","gameList","catch","error","_this3","current","winner","map","move","desc","key","jumpTo","wallet","type","impWallet","genWallet","localWallet","revealKey","switchWallet","loadSeed","status","simbaButton","saveGame","handleClick","href","lines","_lines$i","_Users_stevenperegrine_Desktop_ReactDemo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","_unused","mnemonicWallet","fromMnemonic","set","ReactDOM","render"],"mappings":"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","file":"static/js/main.83268056.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SecureLS from 'secure-ls';\n//import ethers from 'ethers';\nimport { ethers } from 'ethers';\nconst axios = require('axios');\nvar games;\nvar loadedGame = false;\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n        <div>\n       \n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n         \n        </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    \n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n       \n      return;\n    }\n       loadedGame = false;\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n    \n    \n    //We call the import wallet function through here so the UI will update\n    \n    impWallet(seed)\n    {\n        \n        //Runs the generate wallet seed and updates the UI\n        generateWallet(seed);\n        \n        this.forceUpdate();\n    }\n    \n    genWallet()\n    {\n        \n        \n        let randomWallet = ethers.Wallet.createRandom();\n        myWallet = randomWallet;\n        SaveWallet()\n        \n        //requests funds for doing transactions on the new address\n         let payload = {\n            \"account\": String(randomWallet.address),\n            \"currency\": \"ether\",\n            \"value\": \"5\"\n      }\n        axios.post('https://api.simbachain.com/v1-management/requestFunds/', payload, {\n            headers: {\n                'APIKEY' : '95e408ba429c327036e2d09a8be717ca66d9b5b37a6c91a402ebc6c67191d1ed'\n            }})\n        //updates the ui with the new information\n        this.forceUpdate();\n    }\n    revealKey()\n    {\n        //Reveals the Private key and seed\n        document.getElementById(\"privKey\").innerHTML = (\"Private Key: \" + myWallet.privateKey);\n        document.getElementById(\"seed\").innerHTML = (\"Seed: \" + myWallet.mnemonic);\n         this.forceUpdate();\n    }\n    \n    loadSeed()\n    {\n        //Loads the seed stored in browser\n        \n     \n         try{\n         let ls = new SecureLS()\n        return ls.get('walletSeed').data;\n      \n         \n         }\n        catch(err){\n            alert(err);\n        } \n    }\n    switchWallet(){\n        //erases currently stored wallet\n        myWallet = null;\n        let ls = new SecureLS()\n        ls.remove('walletSeed')\n        this.forceUpdate();\n    }\n    \n   gameList(){\n       //gets and displays the last 5 games saved\n       const t = this\n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n        headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n            .then(function (response) {\n          if (response.data.count >= 5) {\n            games = <table>\n            <tr>\n            <th>#</th>\n            <th>Name</th>\n    \n            </tr>\n            <tr>\n            <td>1</td>\n            <td>{response.data.results[0].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(0)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>2</td>\n            <td>{response.data.results[1].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(1)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>3</td>\n            <td>{response.data.results[2].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(2)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>4</td>\n            <td>{response.data.results[3].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(3)}>Select</button></td>\n            </tr>\n              \n            <tr>\n            <td>5</td>\n            <td>{response.data.results[4].payload.inputs.name}</td>\n            <td><button class = \"animatedbutton greenbutton\" onClick={i => t.loadGame(4)}>Select</button></td>\n            </tr>\n \n            </table>\n             t.forceUpdate();\n          }\n    })\n        \n                  }\n  \n\nloadGame(gameNum){\n    //loads and displays a selected game\n        document.body.style.cursor='wait';\n        loadedGame = true;\n        const t = this;\n         \n        var turns = [];\n        \n        \n       \n       axios.get('https://api.simbachain.com/v1/react_tictactoe/turns/',{\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n           //since the data is stored in a string and not an array the data needs to be parsed from a string into an array\n            const turn0 = response.data.results[gameNum].payload.inputs.turn0.split(\";\");\n            const turn1 = response.data.results[gameNum].payload.inputs.turn1.split(\";\");\n            const turn2 = response.data.results[gameNum].payload.inputs.turn2.split(\";\");\n            const turn3 = response.data.results[gameNum].payload.inputs.turn3.split(\";\");\n            const turn4 = response.data.results[gameNum].payload.inputs.turn4.split(\";\");\n            const turn5 = response.data.results[gameNum].payload.inputs.turn5.split(\";\");\n            const turn6 = response.data.results[gameNum].payload.inputs.turn6.split(\";\");\n            const turn7 = response.data.results[gameNum].payload.inputs.turn7.split(\";\");\n            const turn8 = response.data.results[gameNum].payload.inputs.turn8.split(\";\");\n            const turn9 = response.data.results[gameNum].payload.inputs.turn9.split(\";\");\n           \n           //converts the string \"null\" to the type/value of null\n           var cell;\n            for (cell = 0;  cell < turn0.length; cell++) {\n             if (turn0[cell] == \"null\") {\n                 turn0[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn1.length; cell++) {\n             if (turn1[cell] == \"null\") {\n                 turn1[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn2.length; cell++) {\n             if (turn2[cell] == \"null\") {\n                 turn2[cell] = null\n                 }   \n            }\n           \n           for (cell = 0;  cell < turn3.length; cell++) {\n             if (turn3[cell] == \"null\") {\n                 turn3[cell] = null\n                 }   \n            }\n           \n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn4[cell] == \"null\") {\n                 turn4[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn4.length; cell++) {\n             if (turn5[cell] == \"null\") {\n                 turn5[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn6.length; cell++) {\n             if (turn6[cell] == \"null\") {\n                 turn6[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn7.length; cell++) {\n             if (turn7[cell] == \"null\") {\n                 turn7[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn8.length; cell++) {\n             if (turn8[cell] == \"null\") {\n                 turn8[cell] = null\n                 }   \n            }\n           \n            for (cell = 0;  cell < turn9.length; cell++) {\n             if (turn9[cell] == \"null\") {\n                 turn9[cell] = null\n                 }   \n            }\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n            //puts all the different turn arrays into a single array of turns\n            turns = [turn0,turn1,turn2,turn3,turn4,turn5,turn6,turn7,turn8,turn9];\n      \n           // this.displayData(turns);\n           \n           \n           \n            var limit;\n           for (var i = 0; i < turns.length; i++) { \n               if (turns[i] == \" \")\n               {\n                   turns[i] = turns[i -1];\n                   \n                }\n               \n           }\n          \n           //defines the variables needed for editing match data and erases any moves present\n            const history = t.state.history.slice(0, t.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n           \n           \n          \n           \n             //applies the loaded game data \n            t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: turns[0]\n                    },\n                    {\n                        squares: turns[1]\n                    },\n                    {\n                        squares: turns[2]\n                    },\n                    {\n                        squares: turns[3]\n                    },\n                    {\n                        squares: turns[4]\n                    },\n                    {\n                        squares: turns[5]\n                    },\n                    {\n                        squares: turns[6]\n                    },\n                    {\n                        squares: turns[7]\n                    },\n                    {\n                        squares: turns[8]\n                    },\n                    {\n                        squares: turns[9]\n                    }\n                ]),\n            stepNumber: 9,\n            xIsNext: !t.state.xIsNext\n            }); \n           \n         document.body.style.cursor='auto';  \n            \n        })\n    }\n   \n    \n    saveGame(){\n       //saves a matches data to the blockchain\n         document.body.style.cursor='wait';\n        const t = this;\n        if (document.getElementById(\"nameInput\").value == \"\")\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Please name your game.\");\n                return\n            }\n        \n        if (document.getElementById(\"nameInput\").value.length > 50)\n            {\n                 document.body.style.cursor='auto';\n                alert(\"Character limit exceeded\\nName must be 50 characters or less\");\n                return\n            }\n        \n        \n        \n        \n       \n        var moves = [];\n        for (var i = 0; i < this.state.history.length; i++)\n            {\n           //since storing arrays on simba is currently not really an option the arrays are put into strings with each index seperated by ';'\n                var parsed = this.state.history[i].squares[0];\n                 for (var p = 1; p < this.state.history[i].squares.length; p++)\n                    {\n                        parsed += \";\" + this.state.history[i].squares[p];\n                    }\n                \n                moves[i] = parsed;\n            }\n        var move0 = \" \";\n        var move1 = \" \";\n        var move2 = \" \";\n        var move3 = \" \";\n        var move4 = \" \";\n        var move5 = \" \";\n        var move6 = \" \";\n        var move7 = \" \";\n        var move8 = \" \";\n        var move9 = \" \";\n       //assign moves to their variables \n         for (var i = 0; i < moves.length; i++)\n             {\n                 \n                 \n                 if (i == 0)\n                 {move0 = moves[i];}\n                 if (i == 1)\n                 {move1 = moves[i];}\n                 if (i == 2)\n                 {move2 = moves[i];}\n                 if (i == 3)\n                 {move3 = moves[i];}\n                 if (i == 4)\n                 {move4 = moves[i];}\n                 if (i == 5)\n                 {move5 = moves[i];}\n                 if (i == 6)\n                 {move6 = moves[i];}\n                 if (i == 7)\n                 {move7 = moves[i];}\n                 if (i == 8)\n                 {move8 = moves[i];}\n                 if (i == 9)\n                 {move9 = moves[i];}\n                 \n             }\n        \n      //setup the form data needed for posting\n        var myBody = new FormData;\n        myBody.append(\"from\",myWallet.address);\n        myBody.append(\"name\",document.getElementById(\"nameInput\").value);\n        myBody.append(\"turn0\",move0);\n        myBody.append(\"turn1\",move1);\n        myBody.append(\"turn2\",move2);\n        myBody.append(\"turn3\",move3);\n        myBody.append(\"turn4\",move4);\n        myBody.append(\"turn5\",move5);\n        myBody.append(\"turn6\",move6);\n        myBody.append(\"turn7\",move7);\n        myBody.append(\"turn8\",move8);\n        myBody.append(\"turn9\",move9);\n        myBody.append(\"assetId\",\"0x0\")\n        \n        \n       \n        \n\n        //the post command itself\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/turns/', myBody, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n  .then(function (response) {\n            //Sign the transaction and update the game list\n            \n            //This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = response.data.payload.raw;\n    let txnID = response.data.id;\n            //that json is then signed here\n   \n            try {\n            delete transaction[\"gas\"];\n            delete transaction[\"from\"];\n            }\n            catch(err)\n                {\n                    \n                }\n    let signPromise = myWallet.sign(transaction);\n           \n            \n    signPromise.then((signedTransaction)=>{\n       \n       \n        \n       //after the transaction is signed the signed transaction needs to be submitted\n        let payload = {\n        'payload': signedTransaction\n      }\n        axios.post('https://api.simbachain.com/v1/react_tictactoe/transaction/' + txnID + \"/\", payload, {\n            headers: {\n                'APIKEY' : '8fbfe71045403b1a0c36d73c4160f778dda31bbd2249d20cf98e3485f5743933'\n            }})\n        .then(function (response) {\n            alert(\"Transaction Signed and Submitted\");\n        });\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n            \n             t.gameList()\n             document.body.style.cursor='auto';\n            \n  })\n  .catch(function (error) {\n  \n  });\n        \n    //after the game is saved the board is reset        \n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n            const current = history[history.length - 1];\n            const squares = current.squares.slice();\n            history.length = 0;\n         t.setState({\n            history: history.concat\n                ([\n                    {\n                        squares: [null,null,null,null,null,null,null,null,null]\n                    },\n                   \n                ]),\n            stepNumber: 0,\n            xIsNext: !t.state.xIsNext\n            }); \n             this.forceUpdate();\n    }\n    \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    \n   \n      \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <div>\n          <button class=\"button animatedbutton\" onClick={() => this.jumpTo(move)}>{desc}</button>\n            \n           </div>\n        </li>\n      );\n    });\n\n   \n    \n    \n    var wallet = <div><form>Wallet Seed: <input id=\"seedInput\" type=\"text\" /> </form><button class=\"bigbutton animatedbutton\" onClick={i => this.impWallet()}>Restore Wallet</button><button class=\"bigbutton animatedbutton\" onClick={i => this.genWallet()}>Generate Wallet</button></div>\n     \n        var priv = <p></p>\n\n    var localWallet = getWallet()\n    try {  wallet = <div><button class=\"bigbutton animatedbutton\" onClick={i => this.revealKey()}>Reveal Key</button><button class=\"bigbutton animatedbutton\" onClick={i => this.switchWallet()}>Switch Wallet</button><br/>\n        <br/><br/>\n        <br/><div class = \"walletinfo\"><p>Public Key: {localWallet.address}</p><p id=\"privKey\">Private Key:</p><p id=\"seed\">Seed:</p></div></div> }\n    catch(err)\n       {\n           \n         \n        var seed = this.loadSeed(); \n         if (seed)\n             {\n                 this.gameList()\n                 this.impWallet(seed)\n             }\n       }\n         \n         \n          //if the game is over display the save to simba button otherwise leave it as the div\n    var simbaButton = <div></div>\n    if ((winner || moves.length >= 10) && loadedGame == false)\n        {\n        if (localWallet)\n            {\n     simbaButton = <div><form>Game Name: <input id=\"nameInput\" type=\"text\" /> </form> <button onClick={i => this.saveGame()} class=\"bigbutton animatedbutton\">Save to SIMBA</button></div>\n            }\n            else\n                {\n                  simbaButton = <p>Generate/Import a wallet to save game to SIMBA</p>\n                }\n        }\n         \n         \n      \n   \n\n\n    let status;\n     if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n          \n           return (\n        \n      <div className=\"game\">\n                 \n              \n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        <br/>\n        <br/>\n        <div>{games}</div>\n    \n        <div>{wallet}</div>\n        <br/>\n       \n        <div> <a href = \"https://reactdemo.readthedocs.io/en/latest/\">Read the docs</a></div>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n            <div>{simbaButton}</div>\n        </div>\n      </div>\n      \n    );  \n        \n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    \n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n\nvar myWallet;\n    function getWallet(){\n        //returns the wallet for react\n        return myWallet;\n    }\n\n  \n    \n    function generateWallet(seed) {\n        \n    \n/*\nThis function generates the wallet based off of the value of the 'seedInput'\nThe seed should be 12 words\nThis seed generates the public and private key of your wallet\n*/\n     \n//Here we get the 12 word phrase\n try{       \nvar mnemonic = document.getElementById(\"seedInput\").value;\n }\ncatch\n    {\nif (seed)\n    {\n       mnemonic = seed \n    }\n    }\n   \n//Here the wallet is actually generated\n        \ntry {\nlet mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);        \n//Here we assign the wallet to the global variable myWallet\nmyWallet = mnemonicWallet;\n    \n     //requests funds for doing transactions on the new address\n         let payload = {\n            \"account\": String(myWallet.address),\n            \"currency\": \"ether\",\n            \"value\": \"1\"\n      }\n        axios.post('https://api.simbachain.com/v1-management/requestFunds/', payload, {\n            headers: {\n                'APIKEY' : '95e408ba429c327036e2d09a8be717ca66d9b5b37a6c91a402ebc6c67191d1ed'\n            }})\n    \n    SaveWallet()\n    \n    \n    \n    \n    \n}\n        catch(err){\n            alert(\"Invalid Seed\");\n        }\n    \n    }\n\nfunction signTransaction() {\n//This is where signing takes place\n    if (myWallet)\n        {\n//we grab the text value from 'signInput' and run the tryParseJson function found below\n    let transaction = tryParseJSON(document.getElementById(\"signInput\").value);\n            //that json is then signed here\n    let signPromise = myWallet.sign (transaction);\n    signPromise.then((signedTransaction)=>{\n    document.getElementById(\"signOutput\").value = signedTransaction;\n        });\n        }\n    else {\n        //if no wallet is found this alert runs\n        alert(\"Generate wallet before signing\");\n    }\n}\n    function tryParseJSON (jsonString){\n        //we parse the json here\n      try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns null, and typeof null === \"object\",\n        // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n        if (o && typeof o === \"object\") {\n          return o;\n        }\n      }\n      catch (e) { }\n\n      return false;\n    };\n    \n    //Save and load wallets\n    \n    function SaveWallet() {\n        if (myWallet)\n            {\n        //we save the 12 word wallet seed then on load we will generate everything else\n        //SecureLS is used because it does not store the 12 words in plain text\n        //If you wanted to you could make it where the user had to put in a password to unlock their account\n        let ls = new SecureLS();\n        ls.set('walletSeed', {data:myWallet.mnemonic});\n            }\n        else{\n            alert(\"No wallet present to save\");\n        }\n    }\n    function LoadWallet() {\n        //the wallet is loaded and generate wallet is ran to populate the fields\n        //while not the best code to get the seed to the generate wallet function we set the value of 'walletSeed' to the data we just loaded\n       \n        try{\n         let ls = new SecureLS()\n        document.getElementById(\"seedInput\").value = ls.get('walletSeed').data;\n        generateWallet()}\n        catch(err){\n            \n        }\n    }"],"sourceRoot":""}